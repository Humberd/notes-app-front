const fs = require('fs');
const flat = require('flat');

const TRANSLATION_FILE_PATH = './src/assets/i18n/en.json';
const TYPE_DEFINITION_LOCATION = './src/app/shared/translate/models/translation-key.ts';

fs.watchFile(TRANSLATION_FILE_PATH, () => {
  handleChange();
});

handleChange();

function handleChange() {
  console.log('-- Translation changed --');

  try {
    const keys = generateKeys();
    const typeDefinition = generateTypeDefinitionFile(keys);

    writeFile(typeDefinition);
  } catch (e) {
    console.error(e);
  }
}

function generateKeys() {
  const jsonContent = JSON.parse(fs.readFileSync(TRANSLATION_FILE_PATH));

  const flattenedObject = flat.flatten(jsonContent);

  return Object.keys(flattenedObject);
}

function generateTypeDefinitionFile(keys) {
  // language=TypeScript
  return `

// DO NOT EDIT THIS FILE
// THIS FILE IS AUTOMATICALLY GENERATED BY extract-translation-types.js

export type TranslationKey =
${keys.map(it => `    '${it}'`).join(' |\n')};
`.trimStart();
}

function writeFile(typeDefinition) {
  fs.writeFileSync(TYPE_DEFINITION_LOCATION, typeDefinition);
}
